---
import "../../styles/global.css";
import { Image } from "astro:assets";
import {
  sortItemsByDateDesc,
  createSlugFromTitle,
  withBase,
  sortBlogPostsByDateDesc,
} from "../../utils/helpers";
import { type CollectionEntry, getCollection, render } from "astro:content";
import { getBlogPosts, getBlogPost, type BlogPost } from "../../lib/microcms";
import Button from "../../components/Button.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import ArrowLeft from "../../icons/ArrowLeft.astro";
import ArrowRight from "../../icons/ArrowRight.astro";
import siteConfig from "../../site.config";

export async function getStaticPaths() {
  // Markdown„ÅÆË®ò‰∫ã„ÇíÂèñÂæó
  const markdownPosts = (await getCollection("blogs")).sort(sortItemsByDateDesc);
  
  // microCMS„ÅÆË®ò‰∫ã„ÇíÂèñÂæó
  let microCMSPosts: BlogPost[] = [];
  try {
    const response = await getBlogPosts({
      limit: 1000,
      orders: '-publishedAt'
    });
    microCMSPosts = response.contents.filter(post => !post.draft);
  } catch (error) {
    console.warn('microCMS„Åã„Çâ„ÅÆË®ò‰∫ãÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', error);
  }
  
  // ‰∏°Êñπ„ÅÆË®ò‰∫ã„ÇíÁµêÂêàÔºàmicroCMS„ÇíÂÑ™ÂÖàÔºâ
  const allPosts = microCMSPosts.length > 0 ? microCMSPosts : markdownPosts;
  const isMicroCMS = microCMSPosts.length > 0;
  const postCount = allPosts.length;
  
  return allPosts.map((post, index) => ({
    params: { id: isMicroCMS ? (post as BlogPost).id : (post as CollectionEntry<"blogs">).id },
    props: {
      post,
      prevPost: index + 1 !== postCount ? allPosts[index + 1] : null,
      nextPost: index !== 0 ? allPosts[index - 1] : null,
      isMicroCMS,
    },
  }));
}

type Props = {
  post: CollectionEntry<"blogs"> | BlogPost;
  prevPost: CollectionEntry<"blogs"> | BlogPost | null;
  nextPost: CollectionEntry<"blogs"> | BlogPost | null;
  isMicroCMS: boolean;
};

const { post, prevPost, nextPost, isMicroCMS } = Astro.props;

// microCMS„ÅÆÂ†¥Âêà„Å®Markdown„ÅÆÂ†¥Âêà„ÅßÂàÜÂ≤ê
const title = isMicroCMS ? (post as BlogPost).title : (post as CollectionEntry<"blogs">).data.title;
const pubDate = isMicroCMS ? new Date((post as BlogPost).publishedAt) : new Date((post as CollectionEntry<"blogs">).data.pubDate);
const author = isMicroCMS ? (post as BlogPost).author : (post as CollectionEntry<"blogs">).data.author;
const tags = isMicroCMS ? ((post as BlogPost).tags || []) : ((post as CollectionEntry<"blogs">).data.tags || []);
const image = isMicroCMS ? (post as BlogPost).image : (post as CollectionEntry<"blogs">).data.image;
const content = isMicroCMS ? (post as BlogPost).content : null;

// Markdown„ÅÆÂ†¥Âêà„ÅÆ„ÅøContent„ÇíÂèñÂæó
let Content = null;
if (!isMicroCMS) {
  const rendered = await render(post as CollectionEntry<"blogs">);
  Content = rendered.Content;
}
---

<MainLayout pageTitle={siteConfig.title + " | " + title}>
  <div class="page-content">
    <h1 class="sigmar-ff text-center text-balance">{title}</h1>
    <p class="leading-8 text-center kanit-regular text-balance text-xs">
      by üßë‚ÄçüöÄ <span class="kanit-bold">{author}</span> on <span class="kanit-bold"
        >{pubDate.toDateString()}</span
      >
    </p>
    {
      image && image.url && (
        <Image class="mb-8 my-6" src={image?.url} alt={image?.alt || ""} />
      )
    }
    <div class="font-light text-left">
      {isMicroCMS ? (
        <div set:html={content} />
      ) : (
        Content && <Content />
      )}
    </div>
    <p class="kanit-regular text-center text-balance text-xs">
      Tagged: {
        tags.map((tag) => (
          <Button
            class="px-4! m-2"
            href={withBase("/tags/" + (isMicroCMS ? (tag as any).slug : createSlugFromTitle(tag as string)))}
          >
            {isMicroCMS ? (tag as any).name : tag}
          </Button>
        ))
      }
    </p>
    <div
      class="flex flex-col sm:flex-row items-center justify-center gap-4 my-8"
    >
      <Button class="back-link" href={withBase("/blog")}>
        <ArrowLeft class="w-5 h-5 fill-current mr-4" /> Back to All Stories
      </Button>
      {
        (prevPost || nextPost) && nextPost && (
          <Button
            class="back-link text-balance"
            href={withBase("/blog/" + (isMicroCMS ? (nextPost as BlogPost).id : (nextPost as CollectionEntry<"blogs">).id))}
          >
            Next Post: {isMicroCMS ? (nextPost as BlogPost).title : (nextPost as CollectionEntry<"blogs">).data.title}{" "}
            <ArrowRight class="w-5 h-5 fill-current ml-4" />
          </Button>
        )
      }
    </div>
  </div>
</MainLayout>
